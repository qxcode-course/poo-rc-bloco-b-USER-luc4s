{
    "patches": [
        {
            "label": "2025-10-27_11-49-40",
            "content": "@@ -147,16 +147,8 @@\n ness\n-.strip()\n %0A   \n@@ -261,34 +261,32 @@\n eturn 1%0A        \n-el\n if self.hardness\n@@ -316,34 +316,32 @@\n eturn 2%0A        \n-el\n if self.hardness\n@@ -379,18 +379,16 @@\n         \n-el\n if self.\n@@ -438,82 +438,8 @@\n     \n-else:%0A            raise ValueError(f%22hardness inv%C3%A1lida: %7Bself.hardness%7D%22)%0A\n %0A   \n@@ -490,20 +490,16 @@\n hickness\n-:.1f\n %7D:%7Bself.\n@@ -521,16 +521,20 @@\n .size%7D%22%0A\n+    \n %0Aclass P\n@@ -659,17 +659,18 @@\n ef inser\n-t\n+ir\n (self, g\n@@ -710,28 +710,24 @@\n .grafite is \n-not \n None:%0A      \n@@ -945,16 +945,17 @@\n f remove\n+r\n (self):%0A\n@@ -973,32 +973,36 @@\n self.grafite is \n+not \n None:%0A          \n@@ -1064,36 +1064,69 @@\n         \n-self.grafite = None%0A\n+print(f%22removido %7Bself.grafite%7D%22)%0A        return%0A    \n %0A    def\n@@ -1233,33 +1233,32 @@\n          return%0A\n-%0A\n         if self.\n@@ -1264,21 +1264,16 @@\n .grafite\n-.size\n  %3C= 10:%0A\n@@ -1331,33 +1331,32 @@\n          return%0A\n-%0A\n         gasto = \n@@ -1384,25 +1384,24 @@\n Sheet()%0A\n-%0A\n         \n if self.\n@@ -1384,34 +1384,47 @@\n Sheet()%0A        \n-if\n+tamanho_final =\n  self.grafite.si\n@@ -1437,93 +1437,39 @@\n asto\n- %3C 10:%0A            print(%22fail: folha incompleta%22)%0A            self.grafite.size =\n+%0A        if tamanho_final %3E\n  10\n+:\n %0A   \n@@ -1481,24 +1481,13 @@\n     \n-return%0A%0A        \n+self.\n self\n@@ -1513,227 +1513,54 @@\n sto%0A\n-%0A\n     \n-def __str__(self):%0A        grafite_str = %22null%22 if self.grafite is None else f%22%5B%7Bself.grafite%7D%5D%22%0A        return f%22calibre: %7Bself.thickness:.1f%7D, grafite: %7Bgrafite_str%7D%22%0A%0A%0Adef main():%0A    pencil = None%0A    while Tru\n+        print(%22folha escrita%22)%0A        els\n e:%0A \n@@ -1569,758 +1569,75 @@\n     \n- \n-line = input()%0A        args = line.split()%0A        print(f%22$%7B' '.join(args)%7D%22)%0A%0A        if args%5B0%5D == %22end%22:%0A            break%0A        elif args%5B0%5D == %22init%22:%0A            pencil = Pencil(float(args%5B1%5D))%0A        elif args%5B0%5D == %22show%22:%0A            if pencil is not None:%0A                print(pencil)%0A        elif args%5B0%5D == %22insert%22:%0A            if pencil is None:%0A                print(%22fail: nao existe lapis%22)%0A                continue%0A            grafite = Grafite(float(args%5B1%5D), args%5B2%5D, int(args%5B3%5D))%0A            pencil.insert(grafite)%0A        elif args%5B0%5D == %22remove%22:%0A            if pencil is not None:%0A                pencil.remove()%0A        elif args%5B0%5D == %22write%22:%0A            if pencil is not None:%0A                pencil.writePage()%0A%0Amain(\n+     self.grafite.size = 10%0A            print(%22fail: folha incompleta%22\n )\n",
            "lines": "55"
        },
        {
            "label": "2025-10-28_13-51-48",
            "content": "class Grafite:\n    def __init__(self, thickness: float, hardness: str, size: int):\n        self.thickness = thickness\n        self.hardness = hardness.strip()\n        self.size = size\n\n    def usagePerSheet(self) -> int:\n        if self.hardness == \"HB\":\n            return 1\n        elif self.hardness == \"2B\":\n            return 2\n        elif self.hardness == \"4B\":\n            return 4\n        elif self.hardness == \"6B\":\n            return 6\n        else:\n            raise ValueError(f\"hardness inv\u00e1lida: {self.hardness}\")\n\n    def __str__(self):\n        return f\"{self.thickness:.1f}:{self.hardness}:{self.size}\"\n\nclass Pencil:\n    def __init__(self, thickness: float):\n        self.thickness = thickness\n        self.grafite = None\n\n    def insert(self, grafite: Grafite):\n        if self.grafite is not None:\n            print(\"fail: ja existe grafite\")\n            return\n        if grafite.thickness != self.thickness:\n            print(\"fail: calibre incompativel\")\n            return\n        self.grafite = grafite\n\n    def remove(self):\n        if self.grafite is None:\n            print(\"fail: nao existe grafite\")\n            return\n        self.grafite = None\n\n    def writePage(self):\n        if self.grafite is None:\n            print(\"fail: nao existe grafite\")\n            return\n\n        if self.grafite.size <= 10:\n            print(\"fail: tamanho insuficiente\")\n            return\n\n        gasto = self.grafite.usagePerSheet()\n\n        if self.grafite.size - gasto < 10:\n            print(\"fail: folha incompleta\")\n            self.grafite.size = 10\n            return\n\n        self.grafite.size -= gasto\n\n    def __str__(self):\n        grafite_str = \"null\" if self.grafite is None else f\"[{self.grafite}]\"\n        return f\"calibre: {self.thickness:.1f}, grafite: {grafite_str}\"\n\n\ndef main():\n    pencil = None\n    while True:\n        line = input()\n        args = line.split()\n        print(f\"${' '.join(args)}\")\n\n        if args[0] == \"end\":\n            break\n        elif args[0] == \"init\":\n            pencil = Pencil(float(args[1]))\n        elif args[0] == \"show\":\n            if pencil is not None:\n                print(pencil)\n        elif args[0] == \"insert\":\n            if pencil is None:\n                print(\"fail: nao existe lapis\")\n                continue\n            grafite = Grafite(float(args[1]), args[2], int(args[3]))\n            pencil.insert(grafite)\n        elif args[0] == \"remove\":\n            if pencil is not None:\n                pencil.remove()\n        elif args[0] == \"write\":\n            if pencil is not None:\n                pencil.writePage()\n\nmain()",
            "lines": "92"
        }
    ]
}